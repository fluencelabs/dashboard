import "@fluencelabs/aqua-lib/builtin.aqua"

service DashboardEvent("event"):
	collectPeerInfo(peer: PeerId, ident: Info, services: []Service, blueprints: []Blueprint, modules: []Module)
	collectServiceInterface(peer: PeerId, serviceId: string, iface: Interface)

func collectServiceInterfaces(peer: PeerId, services: []Service):
	for srv <- services par:
		on peer:
			info <- Srv.get_interface(srv.id)
		DashboardEvent.collectServiceInterface(peer, srv.id, info.interface)

func askAllAndSend(peer: PeerId):
	on peer:
		ident <- Peer.identify()
		blueprints <- Dist.list_blueprints()
		modules <- Dist.list_modules()
		services <- Srv.list()
	collectServiceInterfaces(peer, services)
	DashboardEvent.collectPeerInfo(peer, ident, services, blueprints, modules)


func findAndAskNeighboursSchema(relayPeerId: PeerId, clientId: PeerId):
	on relayPeerId:
		neighbors <- Kademlia.neighborhood(clientId, false)
		for n <- neighbors par:
			on n:
				neighbors2 <- Kademlia.neighborhood(clientId, false)
				for n2 <- neighbors2:
					askAllAndSend(n2)

func getAll(relayPeerId: PeerId, knownPeers: []PeerId):
	askAllAndSend(relayPeerId)
	
	par for peer <- knownPeers par:
		askAllAndSend(peer)

	par findAndAskNeighboursSchema(relayPeerId, %init_peer_id%)

