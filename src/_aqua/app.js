/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.1.5-142
 *
 */
import { RequestFlowBuilder } from '@fluencelabs/fluence/dist/api.unstable';

export async function helloWorld(client, arg, fn) {
    let request;
    const promise = new Promise((resolve, reject) => {
        request = new RequestFlowBuilder()
            .disableInjections()
            .withRawScript(
                `
(xor
 (seq
  (seq
   (seq
    (seq
     (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
     (call %init_peer_id% ("getDataSrv" "arg") [] arg)
    )
    (xor
     (call %init_peer_id% ("callbackSrv" "fn") [arg] init_call_res)
     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
    )
   )
   (call -relay- ("op" "identity") [])
  )
  (xor
   (call %init_peer_id% ("callbackSrv" "response") [init_call_res])
   (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
  )
 )
 (seq
  (call -relay- ("op" "identity") [])
  (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
 )
)

            `,
            )
            .configHandler((h) => {
                h.on('getDataSrv', '-relay-', () => {
                    return client.relayPeerId;
                });
                h.on('getDataSrv', 'arg', () => {
                    return arg;
                });
                h.on('callbackSrv', 'fn', (args) => {
                    return fn(args[0]);
                });
                h.onEvent('callbackSrv', 'response', (args) => {
                    const [res] = args;
                    resolve(res);
                });

                h.onEvent('errorHandlingSrv', 'error', (args) => {
                    // assuming error is the single argument
                    const [err] = args;
                    reject(err);
                });
            })
            .handleScriptError(reject)
            .handleTimeout(() => {
                reject('Request timed out for helloWorld');
            })
            .build();
    });
    await client.initiateFlow(request);
    return promise;
}
