/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/. 
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.1.9-165
 *
 */
import { RequestFlowBuilder } from '@fluencelabs/fluence/dist/api.unstable';



export async function askAllAndSend(client, peer, collectPeerInfo, collectServiceInterface, config) {
    let request;
    config = config || {};
    const promise = new Promise((resolve, reject) => {
        var r = new RequestFlowBuilder()
            .disableInjections()
            .withRawScript(
                `
(xor
 (seq
  (seq
   (seq
    (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
    (call %init_peer_id% ("getDataSrv" "peer") [] peer)
   )
   (call -relay- ("op" "noop") [])
  )
  (xor
   (seq
    (seq
     (seq
      (seq
       (seq
        (seq
         (seq
          (call peer ("peer" "identify") [] ident)
          (call peer ("dist" "list_blueprints") [] blueprints)
         )
         (call peer ("dist" "list_modules") [] modules)
        )
        (call peer ("srv" "list") [] services)
       )
       (call -relay- ("op" "noop") [])
      )
      (xor
       (call %init_peer_id% ("callbackSrv" "collectPeerInfo") [peer ident services blueprints modules])
       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
      )
     )
     (call -relay- ("op" "noop") [])
    )
    (fold services srv
     (par
      (seq
       (call -relay- ("op" "noop") [])
       (xor
        (seq
         (seq
          (call peer ("srv" "get_interface") [srv.$.id!] iface)
          (call -relay- ("op" "noop") [])
         )
         (xor
          (call %init_peer_id% ("callbackSrv" "collectServiceInterface") [peer srv.$.id! iface])
          (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
         )
        )
        (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
       )
      )
      (seq
       (call -relay- ("op" "noop") [])
       (next srv)
      )
     )
    )
   )
   (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 4])
  )
 )
 (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 5])
)

            `,
            )
            .configHandler((h) => {
                h.on('getDataSrv', '-relay-', () => {
                    return client.relayPeerId;
                });
                h.on('getDataSrv', 'peer', () => {return peer;});
h.on('callbackSrv', 'collectPeerInfo', (args) => {collectPeerInfo(args[0], args[1], args[2], args[3], args[4]); return {};});
h.on('callbackSrv', 'collectServiceInterface', (args) => {collectServiceInterface(args[0], args[1], args[2]); return {};});
                
                h.onEvent('errorHandlingSrv', 'error', (args) => {
                    // assuming error is the single argument
                    const [err] = args;
                    reject(err);
                });
            })
            .handleScriptError(reject)
            .handleTimeout(() => {
                reject('Request timed out for askAllAndSend');
            })
        if(config.ttl) {
            r.withTTL(config.ttl)
        }
        request = r.build();
    });
    await client.initiateFlow(request);
    return Promise.race([promise, Promise.resolve()]);
}
      


export async function getAll(client, relay, knownPeers, collectPeerInfo, collectServiceInterface, collectNeighbors, config) {
    let request;
    config = config || {};
    const promise = new Promise((resolve, reject) => {
        var r = new RequestFlowBuilder()
            .disableInjections()
            .withRawScript(
                `
(xor
 (seq
  (seq
   (seq
    (seq
     (seq
      (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
      (call %init_peer_id% ("getDataSrv" "relay") [] relay)
     )
     (call %init_peer_id% ("getDataSrv" "knownPeers") [] knownPeers)
    )
    (par
     (seq
      (call -relay- ("op" "noop") [])
      (xor
       (seq
        (seq
         (seq
          (seq
           (seq
            (seq
             (seq
              (call relay ("peer" "identify") [] ident)
              (call relay ("dist" "list_blueprints") [] blueprints)
             )
             (call relay ("dist" "list_modules") [] modules)
            )
            (call relay ("srv" "list") [] services)
           )
           (call -relay- ("op" "noop") [])
          )
          (xor
           (call %init_peer_id% ("callbackSrv" "collectPeerInfo") [relay ident services blueprints modules])
           (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
          )
         )
         (call -relay- ("op" "noop") [])
        )
        (fold services srv
         (par
          (seq
           (call -relay- ("op" "noop") [])
           (xor
            (seq
             (seq
              (call relay ("srv" "get_interface") [srv.$.id!] iface)
              (call -relay- ("op" "noop") [])
             )
             (xor
              (call %init_peer_id% ("callbackSrv" "collectServiceInterface") [relay srv.$.id! iface])
              (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
             )
            )
            (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
           )
          )
          (seq
           (call -relay- ("op" "noop") [])
           (next srv)
          )
         )
        )
       )
       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 4])
      )
     )
     (null)
    )
   )
   (fold knownPeers peer
    (par
     (seq
      (call -relay- ("op" "noop") [])
      (xor
       (seq
        (seq
         (seq
          (seq
           (seq
            (seq
             (seq
              (call peer ("peer" "identify") [] ident0)
              (call peer ("dist" "list_blueprints") [] blueprints0)
             )
             (call peer ("dist" "list_modules") [] modules0)
            )
            (call peer ("srv" "list") [] services0)
           )
           (call -relay- ("op" "noop") [])
          )
          (xor
           (call %init_peer_id% ("callbackSrv" "collectPeerInfo") [peer ident0 services0 blueprints0 modules0])
           (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 5])
          )
         )
         (call -relay- ("op" "noop") [])
        )
        (fold services0 srv0
         (par
          (seq
           (call -relay- ("op" "noop") [])
           (xor
            (seq
             (seq
              (call peer ("srv" "get_interface") [srv0.$.id!] iface0)
              (call -relay- ("op" "noop") [])
             )
             (xor
              (call %init_peer_id% ("callbackSrv" "collectServiceInterface") [peer srv0.$.id! iface0])
              (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 6])
             )
            )
            (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 7])
           )
          )
          (seq
           (call -relay- ("op" "noop") [])
           (next srv0)
          )
         )
        )
       )
       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 8])
      )
     )
     (next peer)
    )
   )
  )
  (par
   (seq
    (call -relay- ("op" "noop") [])
    (xor
     (seq
      (seq
       (call relay ("kad" "neighborhood") [%init_peer_id% $nil $nil] neighbors)
       (par
        (seq
         (call -relay- ("op" "noop") [])
         (xor
          (call %init_peer_id% ("callbackSrv" "collectNeighbors") [neighbors])
          (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 9])
         )
        )
        (null)
       )
      )
      (fold neighbors n
       (par
        (xor
         (seq
          (seq
           (call n ("kad" "neighborhood") [%init_peer_id% $nil $nil] neighbors2)
           (call -relay- ("op" "noop") [])
          )
          (xor
           (call %init_peer_id% ("callbackSrv" "collectNeighbors") [neighbors2])
           (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 10])
          )
         )
         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 11])
        )
        (next n)
       )
      )
     )
     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 12])
    )
   )
   (null)
  )
 )
 (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 13])
)

            `,
            )
            .configHandler((h) => {
                h.on('getDataSrv', '-relay-', () => {
                    return client.relayPeerId;
                });
                h.on('getDataSrv', 'relay', () => {return relay;});
h.on('getDataSrv', 'knownPeers', () => {return knownPeers;});
h.on('callbackSrv', 'collectPeerInfo', (args) => {collectPeerInfo(args[0], args[1], args[2], args[3], args[4]); return {};});
h.on('callbackSrv', 'collectServiceInterface', (args) => {collectServiceInterface(args[0], args[1], args[2]); return {};});
h.on('callbackSrv', 'collectNeighbors', (args) => {collectNeighbors(args[0]); return {};});
                
                h.onEvent('errorHandlingSrv', 'error', (args) => {
                    // assuming error is the single argument
                    const [err] = args;
                    reject(err);
                });
            })
            .handleScriptError(reject)
            .handleTimeout(() => {
                reject('Request timed out for getAll');
            })
        if(config.ttl) {
            r.withTTL(config.ttl)
        }
        request = r.build();
    });
    await client.initiateFlow(request);
    return Promise.race([promise, Promise.resolve()]);
}
      


export async function getServicesFromPeers(client, peers, collectPeerInfo, collectServiceInterface, config) {
    let request;
    config = config || {};
    const promise = new Promise((resolve, reject) => {
        var r = new RequestFlowBuilder()
            .disableInjections()
            .withRawScript(
                `
(xor
 (seq
  (seq
   (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
   (call %init_peer_id% ("getDataSrv" "peers") [] peers)
  )
  (fold peers peer
   (par
    (seq
     (call -relay- ("op" "noop") [])
     (xor
      (seq
       (seq
        (seq
         (seq
          (seq
           (seq
            (seq
             (call peer ("peer" "identify") [] ident)
             (call peer ("dist" "list_blueprints") [] blueprints)
            )
            (call peer ("dist" "list_modules") [] modules)
           )
           (call peer ("srv" "list") [] services)
          )
          (call -relay- ("op" "noop") [])
         )
         (xor
          (call %init_peer_id% ("callbackSrv" "collectPeerInfo") [peer ident services blueprints modules])
          (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
         )
        )
        (call -relay- ("op" "noop") [])
       )
       (fold services srv
        (par
         (seq
          (call -relay- ("op" "noop") [])
          (xor
           (seq
            (seq
             (call peer ("srv" "get_interface") [srv.$.id!] iface)
             (call -relay- ("op" "noop") [])
            )
            (xor
             (call %init_peer_id% ("callbackSrv" "collectServiceInterface") [peer srv.$.id! iface])
             (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
            )
           )
           (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
          )
         )
         (seq
          (call -relay- ("op" "noop") [])
          (next srv)
         )
        )
       )
      )
      (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 4])
     )
    )
    (next peer)
   )
  )
 )
 (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 5])
)

            `,
            )
            .configHandler((h) => {
                h.on('getDataSrv', '-relay-', () => {
                    return client.relayPeerId;
                });
                h.on('getDataSrv', 'peers', () => {return peers;});
h.on('callbackSrv', 'collectPeerInfo', (args) => {collectPeerInfo(args[0], args[1], args[2], args[3], args[4]); return {};});
h.on('callbackSrv', 'collectServiceInterface', (args) => {collectServiceInterface(args[0], args[1], args[2]); return {};});
                
                h.onEvent('errorHandlingSrv', 'error', (args) => {
                    // assuming error is the single argument
                    const [err] = args;
                    reject(err);
                });
            })
            .handleScriptError(reject)
            .handleTimeout(() => {
                reject('Request timed out for getServicesFromPeers');
            })
        if(config.ttl) {
            r.withTTL(config.ttl)
        }
        request = r.build();
    });
    await client.initiateFlow(request);
    return Promise.race([promise, Promise.resolve()]);
}
      


export async function discoverNeighbourhood(client, relay, collectNeighbors, config) {
    let request;
    config = config || {};
    const promise = new Promise((resolve, reject) => {
        var r = new RequestFlowBuilder()
            .disableInjections()
            .withRawScript(
                `
(xor
 (seq
  (seq
   (seq
    (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
    (call %init_peer_id% ("getDataSrv" "relay") [] relay)
   )
   (call -relay- ("op" "noop") [])
  )
  (xor
   (seq
    (seq
     (call relay ("kad" "neighborhood") [%init_peer_id% $nil $nil] neighbors)
     (par
      (seq
       (call -relay- ("op" "noop") [])
       (xor
        (call %init_peer_id% ("callbackSrv" "collectNeighbors") [neighbors])
        (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
       )
      )
      (null)
     )
    )
    (fold neighbors n
     (par
      (xor
       (seq
        (seq
         (call n ("kad" "neighborhood") [%init_peer_id% $nil $nil] neighbors2)
         (call -relay- ("op" "noop") [])
        )
        (xor
         (call %init_peer_id% ("callbackSrv" "collectNeighbors") [neighbors2])
         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
        )
       )
       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
      )
      (next n)
     )
    )
   )
   (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 4])
  )
 )
 (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 5])
)

            `,
            )
            .configHandler((h) => {
                h.on('getDataSrv', '-relay-', () => {
                    return client.relayPeerId;
                });
                h.on('getDataSrv', 'relay', () => {return relay;});
h.on('callbackSrv', 'collectNeighbors', (args) => {collectNeighbors(args[0]); return {};});
                
                h.onEvent('errorHandlingSrv', 'error', (args) => {
                    // assuming error is the single argument
                    const [err] = args;
                    reject(err);
                });
            })
            .handleScriptError(reject)
            .handleTimeout(() => {
                reject('Request timed out for discoverNeighbourhood');
            })
        if(config.ttl) {
            r.withTTL(config.ttl)
        }
        request = r.build();
    });
    await client.initiateFlow(request);
    return Promise.race([promise, Promise.resolve()]);
}
      


export async function collectServiceInterfaces(client, peer, services, collectServiceInterface, config) {
    let request;
    config = config || {};
    const promise = new Promise((resolve, reject) => {
        var r = new RequestFlowBuilder()
            .disableInjections()
            .withRawScript(
                `
(xor
 (seq
  (seq
   (seq
    (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
    (call %init_peer_id% ("getDataSrv" "peer") [] peer)
   )
   (call %init_peer_id% ("getDataSrv" "services") [] services)
  )
  (fold services srv
   (par
    (seq
     (call -relay- ("op" "noop") [])
     (xor
      (seq
       (seq
        (call peer ("srv" "get_interface") [srv.$.id!] iface)
        (call -relay- ("op" "noop") [])
       )
       (xor
        (call %init_peer_id% ("callbackSrv" "collectServiceInterface") [peer srv.$.id! iface])
        (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
       )
      )
      (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
     )
    )
    (next srv)
   )
  )
 )
 (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
)

            `,
            )
            .configHandler((h) => {
                h.on('getDataSrv', '-relay-', () => {
                    return client.relayPeerId;
                });
                h.on('getDataSrv', 'peer', () => {return peer;});
h.on('getDataSrv', 'services', () => {return services;});
h.on('callbackSrv', 'collectServiceInterface', (args) => {collectServiceInterface(args[0], args[1], args[2]); return {};});
                
                h.onEvent('errorHandlingSrv', 'error', (args) => {
                    // assuming error is the single argument
                    const [err] = args;
                    reject(err);
                });
            })
            .handleScriptError(reject)
            .handleTimeout(() => {
                reject('Request timed out for collectServiceInterfaces');
            })
        if(config.ttl) {
            r.withTTL(config.ttl)
        }
        request = r.build();
    });
    await client.initiateFlow(request);
    return Promise.race([promise, Promise.resolve()]);
}
      