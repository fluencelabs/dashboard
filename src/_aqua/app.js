/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/. 
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.1.14-SNAPSHOT
 *
 */
import { RequestFlowBuilder } from '@fluencelabs/fluence/dist/api.unstable';



export async function collectServiceInterfaces(client, peer, services, collectServiceInterface, config) {
    let request;
    config = config || {};
    const promise = new Promise((resolve, reject) => {
        var r = new RequestFlowBuilder()
            .disableInjections()
            .withRawScript(
                `
(xor
 (seq
  (seq
   (seq
    (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
    (call %init_peer_id% ("getDataSrv" "peer") [] peer)
   )
   (call %init_peer_id% ("getDataSrv" "services") [] services)
  )
  (fold services srv
   (par
    (seq
     (call -relay- ("op" "noop") [])
     (xor
      (seq
       (seq
        (call peer ("srv" "get_interface") [srv.$.id!] iface)
        (call -relay- ("op" "noop") [])
       )
       (xor
        (call %init_peer_id% ("callbackSrv" "collectServiceInterface") [peer srv.$.id! iface])
        (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
       )
      )
      (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
     )
    )
    (next srv)
   )
  )
 )
 (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
)

            `,
            )
            .configHandler((h) => {
                h.on('getDataSrv', '-relay-', () => {
                    return client.relayPeerId;
                });
                h.on('getDataSrv', 'peer', () => {return peer;});
h.on('getDataSrv', 'services', () => {return services;});
h.on('callbackSrv', 'collectServiceInterface', (args) => {collectServiceInterface(args[0], args[1], args[2]); return {};});
                
                h.onEvent('errorHandlingSrv', 'error', (args) => {
                    // assuming error is the single argument
                    const [err] = args;
                    reject(err);
                });
            })
            .handleScriptError(reject)
            .handleTimeout(() => {
                reject('Request timed out for collectServiceInterfaces');
            })
        if(config.ttl) {
            r.withTTL(config.ttl)
        }
        request = r.build();
    });
    await client.initiateFlow(request);
    return Promise.race([promise, Promise.resolve()]);
}
      


export async function askAllAndSend(client, peer, collectPeerInfo, collectServiceInterface, config) {
    let request;
    config = config || {};
    const promise = new Promise((resolve, reject) => {
        var r = new RequestFlowBuilder()
            .disableInjections()
            .withRawScript(
                `
(xor
 (seq
  (seq
   (seq
    (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
    (call %init_peer_id% ("getDataSrv" "peer") [] peer)
   )
   (call -relay- ("op" "noop") [])
  )
  (xor
   (seq
    (seq
     (seq
      (seq
       (seq
        (seq
         (seq
          (call peer ("peer" "identify") [] ident)
          (call peer ("dist" "list_blueprints") [] blueprints)
         )
         (call peer ("dist" "list_modules") [] modules)
        )
        (call peer ("srv" "list") [] services)
       )
       (call -relay- ("op" "noop") [])
      )
      (xor
       (call %init_peer_id% ("callbackSrv" "collectPeerInfo") [peer ident services blueprints modules])
       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
      )
     )
     (call -relay- ("op" "noop") [])
    )
    (fold services srv
     (par
      (seq
       (call -relay- ("op" "noop") [])
       (xor
        (seq
         (seq
          (call peer ("srv" "get_interface") [srv.$.id!] iface)
          (call -relay- ("op" "noop") [])
         )
         (xor
          (call %init_peer_id% ("callbackSrv" "collectServiceInterface") [peer srv.$.id! iface])
          (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
         )
        )
        (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
       )
      )
      (seq
       (call -relay- ("op" "noop") [])
       (next srv)
      )
     )
    )
   )
   (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 4])
  )
 )
 (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 5])
)

            `,
            )
            .configHandler((h) => {
                h.on('getDataSrv', '-relay-', () => {
                    return client.relayPeerId;
                });
                h.on('getDataSrv', 'peer', () => {return peer;});
h.on('callbackSrv', 'collectPeerInfo', (args) => {collectPeerInfo(args[0], args[1], args[2], args[3], args[4]); return {};});
h.on('callbackSrv', 'collectServiceInterface', (args) => {collectServiceInterface(args[0], args[1], args[2]); return {};});
                
                h.onEvent('errorHandlingSrv', 'error', (args) => {
                    // assuming error is the single argument
                    const [err] = args;
                    reject(err);
                });
            })
            .handleScriptError(reject)
            .handleTimeout(() => {
                reject('Request timed out for askAllAndSend');
            })
        if(config.ttl) {
            r.withTTL(config.ttl)
        }
        request = r.build();
    });
    await client.initiateFlow(request);
    return Promise.race([promise, Promise.resolve()]);
}
      


export async function findAndAskNeighboursSchema(client, relayPeerId, clientId, collectPeerInfo, collectServiceInterface, config) {
    let request;
    config = config || {};
    const promise = new Promise((resolve, reject) => {
        var r = new RequestFlowBuilder()
            .disableInjections()
            .withRawScript(
                `
(xor
 (seq
  (seq
   (seq
    (seq
     (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
     (call %init_peer_id% ("getDataSrv" "relayPeerId") [] relayPeerId)
    )
    (call %init_peer_id% ("getDataSrv" "clientId") [] clientId)
   )
   (call -relay- ("op" "noop") [])
  )
  (xor
   (seq
    (call relayPeerId ("kad" "neighborhood") [clientId false] neighbors)
    (fold neighbors n
     (par
      (xor
       (seq
        (call n ("kad" "neighborhood") [clientId false] neighbors2)
        (fold neighbors2 n2
         (par
          (xor
           (seq
            (seq
             (seq
              (seq
               (seq
                (seq
                 (seq
                  (call n2 ("peer" "identify") [] ident)
                  (call n2 ("dist" "list_blueprints") [] blueprints)
                 )
                 (call n2 ("dist" "list_modules") [] modules)
                )
                (call n2 ("srv" "list") [] services)
               )
               (call -relay- ("op" "noop") [])
              )
              (xor
               (call %init_peer_id% ("callbackSrv" "collectPeerInfo") [n2 ident services blueprints modules])
               (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
              )
             )
             (call -relay- ("op" "noop") [])
            )
            (fold services srv
             (par
              (seq
               (call -relay- ("op" "noop") [])
               (xor
                (seq
                 (seq
                  (call n2 ("srv" "get_interface") [srv.$.id!] iface)
                  (call -relay- ("op" "noop") [])
                 )
                 (xor
                  (call %init_peer_id% ("callbackSrv" "collectServiceInterface") [n2 srv.$.id! iface])
                  (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                 )
                )
                (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
               )
              )
              (seq
               (call -relay- ("op" "noop") [])
               (next srv)
              )
             )
            )
           )
           (seq
            (call -relay- ("op" "noop") [])
            (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 4])
           )
          )
          (next n2)
         )
        )
       )
       (seq
        (call -relay- ("op" "noop") [])
        (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 5])
       )
      )
      (next n)
     )
    )
   )
   (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 6])
  )
 )
 (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 7])
)

            `,
            )
            .configHandler((h) => {
                h.on('getDataSrv', '-relay-', () => {
                    return client.relayPeerId;
                });
                h.on('getDataSrv', 'relayPeerId', () => {return relayPeerId;});
h.on('getDataSrv', 'clientId', () => {return clientId;});
h.on('callbackSrv', 'collectPeerInfo', (args) => {collectPeerInfo(args[0], args[1], args[2], args[3], args[4]); return {};});
h.on('callbackSrv', 'collectServiceInterface', (args) => {collectServiceInterface(args[0], args[1], args[2]); return {};});
                
                h.onEvent('errorHandlingSrv', 'error', (args) => {
                    // assuming error is the single argument
                    const [err] = args;
                    reject(err);
                });
            })
            .handleScriptError(reject)
            .handleTimeout(() => {
                reject('Request timed out for findAndAskNeighboursSchema');
            })
        if(config.ttl) {
            r.withTTL(config.ttl)
        }
        request = r.build();
    });
    await client.initiateFlow(request);
    return Promise.race([promise, Promise.resolve()]);
}
      


export async function getAll(client, relayPeerId, knownPeers, collectPeerInfo, collectServiceInterface, config) {
    let request;
    config = config || {};
    const promise = new Promise((resolve, reject) => {
        var r = new RequestFlowBuilder()
            .disableInjections()
            .withRawScript(
                `
(xor
 (seq
  (seq
   (seq
    (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
    (call %init_peer_id% ("getDataSrv" "relayPeerId") [] relayPeerId)
   )
   (call %init_peer_id% ("getDataSrv" "knownPeers") [] knownPeers)
  )
  (fold knownPeers peer
   (par
    (seq
     (call -relay- ("op" "noop") [])
     (xor
      (seq
       (seq
        (seq
         (seq
          (seq
           (seq
            (seq
             (call peer ("peer" "identify") [] ident)
             (call peer ("dist" "list_blueprints") [] blueprints)
            )
            (call peer ("dist" "list_modules") [] modules)
           )
           (call peer ("srv" "list") [] services)
          )
          (call -relay- ("op" "noop") [])
         )
         (xor
          (call %init_peer_id% ("callbackSrv" "collectPeerInfo") [peer ident services blueprints modules])
          (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
         )
        )
        (call -relay- ("op" "noop") [])
       )
       (fold services srv
        (par
         (seq
          (call -relay- ("op" "noop") [])
          (xor
           (seq
            (seq
             (call peer ("srv" "get_interface") [srv.$.id!] iface)
             (call -relay- ("op" "noop") [])
            )
            (xor
             (call %init_peer_id% ("callbackSrv" "collectServiceInterface") [peer srv.$.id! iface])
             (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
            )
           )
           (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
          )
         )
         (seq
          (call -relay- ("op" "noop") [])
          (next srv)
         )
        )
       )
      )
      (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 4])
     )
    )
    (next peer)
   )
  )
 )
 (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 5])
)

            `,
            )
            .configHandler((h) => {
                h.on('getDataSrv', '-relay-', () => {
                    return client.relayPeerId;
                });
                h.on('getDataSrv', 'relayPeerId', () => {return relayPeerId;});
h.on('getDataSrv', 'knownPeers', () => {return knownPeers;});
h.on('callbackSrv', 'collectPeerInfo', (args) => {collectPeerInfo(args[0], args[1], args[2], args[3], args[4]); return {};});
h.on('callbackSrv', 'collectServiceInterface', (args) => {collectServiceInterface(args[0], args[1], args[2]); return {};});
                
                h.onEvent('errorHandlingSrv', 'error', (args) => {
                    // assuming error is the single argument
                    const [err] = args;
                    reject(err);
                });
            })
            .handleScriptError(reject)
            .handleTimeout(() => {
                reject('Request timed out for getAll');
            })
        if(config.ttl) {
            r.withTTL(config.ttl)
        }
        request = r.build();
    });
    await client.initiateFlow(request);
    return Promise.race([promise, Promise.resolve()]);
}
      