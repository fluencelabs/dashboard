/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/. 
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.1.6-149
 *
 */
import { RequestFlowBuilder } from '@fluencelabs/fluence/dist/api.unstable';



export async function collectServiceInterfaces(client, peer, services) {
    let request;
    const promise = new Promise((resolve, reject) => {
        request = new RequestFlowBuilder()
            .disableInjections()
            .withRawScript(
                `
(xor
 (seq
  (seq
   (seq
    (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
    (call %init_peer_id% ("getDataSrv" "peer") [] peer)
   )
   (call %init_peer_id% ("getDataSrv" "services") [] services)
  )
  (fold services srv
   (par
    (seq
     (seq
      (seq
       (call -relay- ("op" "identity") [])
       (xor
        (call peer ("srv" "get_interface") [srv.$.id!] iface)
        (seq
         (seq
          (call -relay- ("op" "identity") [])
          (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
         )
         (call -relay- ("op" "identity") [])
        )
       )
      )
      (call -relay- ("op" "identity") [])
     )
     (call %init_peer_id% ("event" "collectServiceInterface") [peer srv.$.id! iface])
    )
    (next srv)
   )
  )
 )
 (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
)

            `,
            )
            .configHandler((h) => {
                h.on('getDataSrv', '-relay-', () => {
                    return client.relayPeerId;
                });
                h.on('getDataSrv', 'peer', () => {return peer;});
h.on('getDataSrv', 'services', () => {return services;});
                
                h.onEvent('errorHandlingSrv', 'error', (args) => {
                    // assuming error is the single argument
                    const [err] = args;
                    reject(err);
                });
            })
            .handleScriptError(reject)
            .handleTimeout(() => {
                reject('Request timed out for collectServiceInterfaces');
            })
            .build();
    });
    await client.initiateFlow(request);
    return Promise.race([promise, Promise.resolve()]);
}
      


export async function askAllAndSend(client, peer) {
    let request;
    const promise = new Promise((resolve, reject) => {
        request = new RequestFlowBuilder()
            .disableInjections()
            .withRawScript(
                `
(xor
 (seq
  (seq
   (seq
    (seq
     (seq
      (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
      (call %init_peer_id% ("getDataSrv" "peer") [] peer)
     )
     (call -relay- ("op" "identity") [])
    )
    (xor
     (seq
      (seq
       (seq
        (call peer ("peer" "identify") [] ident)
        (call peer ("dist" "list_blueprints") [] blueprints)
       )
       (call peer ("dist" "list_modules") [] modules)
      )
      (call peer ("srv" "list") [] services)
     )
     (seq
      (seq
       (call -relay- ("op" "identity") [])
       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
      )
      (call -relay- ("op" "identity") [])
     )
    )
   )
   (call -relay- ("op" "identity") [])
  )
  (fold services srv
   (par
    (seq
     (seq
      (seq
       (call -relay- ("op" "identity") [])
       (xor
        (call peer ("srv" "get_interface") [srv.$.id!] iface)
        (seq
         (seq
          (call -relay- ("op" "identity") [])
          (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
         )
         (call -relay- ("op" "identity") [])
        )
       )
      )
      (call -relay- ("op" "identity") [])
     )
     (call %init_peer_id% ("event" "collectServiceInterface") [peer srv.$.id! iface])
    )
    (next srv)
   )
  )
 )
 (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
)

            `,
            )
            .configHandler((h) => {
                h.on('getDataSrv', '-relay-', () => {
                    return client.relayPeerId;
                });
                h.on('getDataSrv', 'peer', () => {return peer;});
                
                h.onEvent('errorHandlingSrv', 'error', (args) => {
                    // assuming error is the single argument
                    const [err] = args;
                    reject(err);
                });
            })
            .handleScriptError(reject)
            .handleTimeout(() => {
                reject('Request timed out for askAllAndSend');
            })
            .build();
    });
    await client.initiateFlow(request);
    return Promise.race([promise, Promise.resolve()]);
}
      


export async function findAndAskNeighboursSchema(client, relayPeerId, clientId) {
    let request;
    const promise = new Promise((resolve, reject) => {
        request = new RequestFlowBuilder()
            .disableInjections()
            .withRawScript(
                `
(xor
 (seq
  (seq
   (seq
    (seq
     (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
     (call %init_peer_id% ("getDataSrv" "relayPeerId") [] relayPeerId)
    )
    (call %init_peer_id% ("getDataSrv" "clientId") [] clientId)
   )
   (call -relay- ("op" "identity") [])
  )
  (xor
   (seq
    (call relayPeerId ("kad" "neighborhood") [clientId false] neighbors)
    (fold neighbors n
     (par
      (xor
       (seq
        (call n ("kad" "neighborhood") [clientId false] neighbors2)
        (fold neighbors2 n2
         (par
          (seq
           (xor
            (seq
             (seq
              (seq
               (call n2 ("peer" "identify") [] ident)
               (call n2 ("dist" "list_blueprints") [] blueprints)
              )
              (call n2 ("dist" "list_modules") [] modules)
             )
             (call n2 ("srv" "list") [] services)
            )
            (seq
             (seq
              (call -relay- ("op" "identity") [])
              (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
             )
             (call -relay- ("op" "identity") [])
            )
           )
           (fold services srv
            (par
             (seq
              (xor
               (call n2 ("srv" "get_interface") [srv.$.id!] iface)
               (seq
                (seq
                 (call -relay- ("op" "identity") [])
                 (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                )
                (call -relay- ("op" "identity") [])
               )
              )
              (call n ("event" "collectServiceInterface") [n2 srv.$.id! iface])
             )
             (next srv)
            )
           )
          )
          (next n2)
         )
        )
       )
       (seq
        (seq
         (call -relay- ("op" "identity") [])
         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
        )
        (call -relay- ("op" "identity") [])
       )
      )
      (next n)
     )
    )
   )
   (seq
    (seq
     (call -relay- ("op" "identity") [])
     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 4])
    )
    (call -relay- ("op" "identity") [])
   )
  )
 )
 (seq
  (call -relay- ("op" "identity") [])
  (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 5])
 )
)

            `,
            )
            .configHandler((h) => {
                h.on('getDataSrv', '-relay-', () => {
                    return client.relayPeerId;
                });
                h.on('getDataSrv', 'relayPeerId', () => {return relayPeerId;});
h.on('getDataSrv', 'clientId', () => {return clientId;});
                
                h.onEvent('errorHandlingSrv', 'error', (args) => {
                    // assuming error is the single argument
                    const [err] = args;
                    reject(err);
                });
            })
            .handleScriptError(reject)
            .handleTimeout(() => {
                reject('Request timed out for findAndAskNeighboursSchema');
            })
            .build();
    });
    await client.initiateFlow(request);
    return Promise.race([promise, Promise.resolve()]);
}
      


export async function getAll(client, relayPeerId, knownPeers) {
    let request;
    const promise = new Promise((resolve, reject) => {
        request = new RequestFlowBuilder()
            .disableInjections()
            .withRawScript(
                `
(xor
 (seq
  (seq
   (seq
    (seq
     (seq
      (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
      (call %init_peer_id% ("getDataSrv" "relayPeerId") [] relayPeerId)
     )
     (call %init_peer_id% ("getDataSrv" "knownPeers") [] knownPeers)
    )
    (par
     (seq
      (seq
       (seq
        (call -relay- ("op" "identity") [])
        (xor
         (seq
          (seq
           (seq
            (call relayPeerId ("peer" "identify") [] ident)
            (call relayPeerId ("dist" "list_blueprints") [] blueprints)
           )
           (call relayPeerId ("dist" "list_modules") [] modules)
          )
          (call relayPeerId ("srv" "list") [] services)
         )
         (seq
          (seq
           (call -relay- ("op" "identity") [])
           (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
          )
          (call -relay- ("op" "identity") [])
         )
        )
       )
       (call -relay- ("op" "identity") [])
      )
      (fold services srv
       (par
        (seq
         (seq
          (seq
           (call -relay- ("op" "identity") [])
           (xor
            (call relayPeerId ("srv" "get_interface") [srv.$.id!] iface)
            (seq
             (seq
              (call -relay- ("op" "identity") [])
              (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
             )
             (call -relay- ("op" "identity") [])
            )
           )
          )
          (call -relay- ("op" "identity") [])
         )
         (call %init_peer_id% ("event" "collectServiceInterface") [relayPeerId srv.$.id! iface])
        )
        (next srv)
       )
      )
     )
     (fold knownPeers peer
      (par
       (seq
        (seq
         (seq
          (call -relay- ("op" "identity") [])
          (xor
           (seq
            (seq
             (seq
              (call peer ("peer" "identify") [] ident0)
              (call peer ("dist" "list_blueprints") [] blueprints0)
             )
             (call peer ("dist" "list_modules") [] modules0)
            )
            (call peer ("srv" "list") [] services0)
           )
           (seq
            (seq
             (call -relay- ("op" "identity") [])
             (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
            )
            (call -relay- ("op" "identity") [])
           )
          )
         )
         (call -relay- ("op" "identity") [])
        )
        (fold services0 srv0
         (par
          (seq
           (seq
            (seq
             (call -relay- ("op" "identity") [])
             (xor
              (call peer ("srv" "get_interface") [srv0.$.id!] iface0)
              (seq
               (seq
                (call -relay- ("op" "identity") [])
                (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 4])
               )
               (call -relay- ("op" "identity") [])
              )
             )
            )
            (call -relay- ("op" "identity") [])
           )
           (call %init_peer_id% ("event" "collectServiceInterface") [peer srv0.$.id! iface0])
          )
          (next srv0)
         )
        )
       )
       (next peer)
      )
     )
    )
   )
   (call -relay- ("op" "identity") [])
  )
  (xor
   (seq
    (call relayPeerId ("kad" "neighborhood") [%init_peer_id% false] neighbors)
    (fold neighbors n
     (par
      (xor
       (seq
        (call n ("kad" "neighborhood") [%init_peer_id% false] neighbors2)
        (fold neighbors2 n2
         (par
          (seq
           (xor
            (seq
             (seq
              (seq
               (call n2 ("peer" "identify") [] ident1)
               (call n2 ("dist" "list_blueprints") [] blueprints1)
              )
              (call n2 ("dist" "list_modules") [] modules1)
             )
             (call n2 ("srv" "list") [] services1)
            )
            (seq
             (seq
              (call -relay- ("op" "identity") [])
              (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 5])
             )
             (call -relay- ("op" "identity") [])
            )
           )
           (fold services1 srv1
            (par
             (seq
              (xor
               (call n2 ("srv" "get_interface") [srv1.$.id!] iface1)
               (seq
                (seq
                 (call -relay- ("op" "identity") [])
                 (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 6])
                )
                (call -relay- ("op" "identity") [])
               )
              )
              (call n ("event" "collectServiceInterface") [n2 srv1.$.id! iface1])
             )
             (next srv1)
            )
           )
          )
          (next n2)
         )
        )
       )
       (seq
        (seq
         (call -relay- ("op" "identity") [])
         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 7])
        )
        (call -relay- ("op" "identity") [])
       )
      )
      (next n)
     )
    )
   )
   (seq
    (seq
     (call -relay- ("op" "identity") [])
     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 8])
    )
    (call -relay- ("op" "identity") [])
   )
  )
 )
 (seq
  (call -relay- ("op" "identity") [])
  (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 9])
 )
)

            `,
            )
            .configHandler((h) => {
                h.on('getDataSrv', '-relay-', () => {
                    return client.relayPeerId;
                });
                h.on('getDataSrv', 'relayPeerId', () => {return relayPeerId;});
h.on('getDataSrv', 'knownPeers', () => {return knownPeers;});
                
                h.onEvent('errorHandlingSrv', 'error', (args) => {
                    // assuming error is the single argument
                    const [err] = args;
                    reject(err);
                });
            })
            .handleScriptError(reject)
            .handleTimeout(() => {
                reject('Request timed out for getAll');
            })
            .build();
    });
    await client.initiateFlow(request);
    return Promise.race([promise, Promise.resolve()]);
}
      