/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/. 
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.1.5-142
 *
 */
import { RequestFlowBuilder } from '@fluencelabs/fluence/dist/api.unstable';



export async function askAllAndSend(client, peer) {
    let request;
    const promise = new Promise((resolve, reject) => {
        request = new RequestFlowBuilder()
            .disableInjections()
            .withRawScript(
                `
(xor
 (seq
  (seq
   (seq
    (seq
     (seq
      (seq
       (seq
        (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
        (call %init_peer_id% ("getDataSrv" "peer") [] peer)
       )
       (call -relay- ("op" "identity") [])
      )
      (xor
       (seq
        (seq
         (seq
          (call peer ("peer" "identify") [] ident)
          (call peer ("dist" "list_blueprints") [] blueprints)
         )
         (call peer ("dist" "list_modules") [] modules)
        )
        (call peer ("srv" "list") [] services)
       )
       (seq
        (call -relay- ("op" "identity") [])
        (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
       )
      )
     )
     (call -relay- ("op" "identity") [])
    )
    (call %init_peer_id% ("event" "collectPeerInfo") [peer ident services blueprints modules])
   )
   (call -relay- ("op" "identity") [])
  )
  (xor
   (fold services srv
    (par
     (seq
      (call peer ("srv" "get_interface") [srv.$.id!] info)
      (call peer ("event" "collectServiceInterface") [peer srv.$.id! info.$.interface!])
     )
     (next srv)
    )
   )
   (seq
    (seq
     (call -relay- ("op" "identity") [])
     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
    )
    (call -relay- ("op" "identity") [])
   )
  )
 )
 (seq
  (call -relay- ("op" "identity") [])
  (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
 )
)

            `,
            )
            .configHandler((h) => {
                h.on('getDataSrv', '-relay-', () => {
                    return client.relayPeerId;
                });
                h.on('getDataSrv', 'peer', () => {return peer;});
                
                h.onEvent('errorHandlingSrv', 'error', (args) => {
                    // assuming error is the single argument
                    const [err] = args;
                    reject(err);
                });
            })
            .handleScriptError(reject)
            .handleTimeout(() => {
                reject('Request timed out for askAllAndSend');
            })
            .build();
    });
    await client.initiateFlow(request);
    return Promise.race([promise, Promise.resolve()]);
}
      


export async function getAll(client, relayPeerId, knownPeers) {
    let request;
    const promise = new Promise((resolve, reject) => {
        request = new RequestFlowBuilder()
            .disableInjections()
            .withRawScript(
                `
(xor
 (seq
  (seq
   (seq
    (seq
     (seq
      (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
      (call %init_peer_id% ("getDataSrv" "relayPeerId") [] relayPeerId)
     )
     (call %init_peer_id% ("getDataSrv" "knownPeers") [] knownPeers)
    )
    (par
     (seq
      (seq
       (seq
        (seq
         (seq
          (call -relay- ("op" "identity") [])
          (xor
           (seq
            (seq
             (seq
              (call relayPeerId ("peer" "identify") [] ident)
              (call relayPeerId ("dist" "list_blueprints") [] blueprints)
             )
             (call relayPeerId ("dist" "list_modules") [] modules)
            )
            (call relayPeerId ("srv" "list") [] services)
           )
           (seq
            (call -relay- ("op" "identity") [])
            (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
           )
          )
         )
         (call -relay- ("op" "identity") [])
        )
        (call %init_peer_id% ("event" "collectPeerInfo") [relayPeerId ident services blueprints modules])
       )
       (call -relay- ("op" "identity") [])
      )
      (xor
       (fold services srv
        (par
         (seq
          (call relayPeerId ("srv" "get_interface") [srv.$.id!] info)
          (call relayPeerId ("event" "collectServiceInterface") [relayPeerId srv.$.id! info.$.interface!])
         )
         (next srv)
        )
       )
       (seq
        (call -relay- ("op" "identity") [])
        (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
       )
      )
     )
     (seq
      (seq
       (seq
        (call -relay- ("op" "identity") [])
        (fold knownPeers peer
         (par
          (seq
           (seq
            (seq
             (seq
              (seq
               (call -relay- ("op" "identity") [])
               (xor
                (seq
                 (seq
                  (seq
                   (call peer ("peer" "identify") [] ident0)
                   (call peer ("dist" "list_blueprints") [] blueprints0)
                  )
                  (call peer ("dist" "list_modules") [] modules0)
                 )
                 (call peer ("srv" "list") [] services0)
                )
                (seq
                 (call -relay- ("op" "identity") [])
                 (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                )
               )
              )
              (call -relay- ("op" "identity") [])
             )
             (call %init_peer_id% ("event" "collectPeerInfo") [peer ident0 services0 blueprints0 modules0])
            )
            (call -relay- ("op" "identity") [])
           )
           (xor
            (fold services0 srv0
             (par
              (seq
               (call peer ("srv" "get_interface") [srv0.$.id!] info0)
               (call peer ("event" "collectServiceInterface") [peer srv0.$.id! info0.$.interface!])
              )
              (next srv0)
             )
            )
            (seq
             (call -relay- ("op" "identity") [])
             (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 4])
            )
           )
          )
          (seq
           (call -relay- ("op" "identity") [])
           (next peer)
          )
         )
        )
       )
       (call -relay- ("op" "identity") [])
      )
      (call %init_peer_id% ("op" "identity") [])
     )
    )
   )
   (call -relay- ("op" "identity") [])
  )
  (xor
   (seq
    (call relayPeerId ("kad" "neighborhood") [%init_peer_id% false] neighbors)
    (fold neighbors n
     (par
      (xor
       (seq
        (call n ("kad" "neighborhood") [%init_peer_id% false] neighbors2)
        (fold neighbors2 n2
         (seq
          (seq
           (seq
            (seq
             (seq
              (xor
               (seq
                (seq
                 (seq
                  (call n2 ("peer" "identify") [] ident1)
                  (call n2 ("dist" "list_blueprints") [] blueprints1)
                 )
                 (call n2 ("dist" "list_modules") [] modules1)
                )
                (call n2 ("srv" "list") [] services1)
               )
               (seq
                (call -relay- ("op" "identity") [])
                (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 5])
               )
              )
              (call -relay- ("op" "identity") [])
             )
             (call n ("event" "collectPeerInfo") [n2 ident1 services1 blueprints1 modules1])
            )
            (xor
             (fold services1 srv1
              (par
               (seq
                (call n2 ("srv" "get_interface") [srv1.$.id!] info1)
                (call n2 ("event" "collectServiceInterface") [n2 srv1.$.id! info1.$.interface!])
               )
               (next srv1)
              )
             )
             (seq
              (call -relay- ("op" "identity") [])
              (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 6])
             )
            )
           )
           (call -relay- ("op" "identity") [])
          )
          (next n2)
         )
        )
       )
       (seq
        (call -relay- ("op" "identity") [])
        (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 7])
       )
      )
      (seq
       (seq
        (seq
         (call -relay- ("op" "identity") [])
         (next n)
        )
        (call -relay- ("op" "identity") [])
       )
       (call %init_peer_id% ("op" "identity") [])
      )
     )
    )
   )
   (seq
    (seq
     (call -relay- ("op" "identity") [])
     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 8])
    )
    (call -relay- ("op" "identity") [])
   )
  )
 )
 (seq
  (call -relay- ("op" "identity") [])
  (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 9])
 )
)

            `,
            )
            .configHandler((h) => {
                h.on('getDataSrv', '-relay-', () => {
                    return client.relayPeerId;
                });
                h.on('getDataSrv', 'relayPeerId', () => {return relayPeerId;});
h.on('getDataSrv', 'knownPeers', () => {return knownPeers;});
                
                h.onEvent('errorHandlingSrv', 'error', (args) => {
                    // assuming error is the single argument
                    const [err] = args;
                    reject(err);
                });
            })
            .handleScriptError(reject)
            .handleTimeout(() => {
                reject('Request timed out for getAll');
            })
            .build();
    });
    await client.initiateFlow(request);
    return Promise.race([promise, Promise.resolve()]);
}
      


export async function dashboardEvent_collectServiceInterface(client, peer, serviceId, iface) {
    let request;
    const promise = new Promise((resolve, reject) => {
        request = new RequestFlowBuilder()
            .disableInjections()
            .withRawScript(
                `
(xor
 (seq
  (seq
   (seq
    (seq
     (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
     (call %init_peer_id% ("getDataSrv" "peer") [] peer)
    )
    (call %init_peer_id% ("getDataSrv" "serviceId") [] serviceId)
   )
   (call %init_peer_id% ("getDataSrv" "iface") [] iface)
  )
  (call %init_peer_id% ("event" "collectServiceInterface") [peer serviceId iface])
 )
 (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
)

            `,
            )
            .configHandler((h) => {
                h.on('getDataSrv', '-relay-', () => {
                    return client.relayPeerId;
                });
                h.on('getDataSrv', 'peer', () => {return peer;});
h.on('getDataSrv', 'serviceId', () => {return serviceId;});
h.on('getDataSrv', 'iface', () => {return iface;});
                
                h.onEvent('errorHandlingSrv', 'error', (args) => {
                    // assuming error is the single argument
                    const [err] = args;
                    reject(err);
                });
            })
            .handleScriptError(reject)
            .handleTimeout(() => {
                reject('Request timed out for dashboardEvent_collectServiceInterface');
            })
            .build();
    });
    await client.initiateFlow(request);
    return Promise.race([promise, Promise.resolve()]);
}
      


export async function findAndAskNeighboursSchema(client, relayPeerId, clientId) {
    let request;
    const promise = new Promise((resolve, reject) => {
        request = new RequestFlowBuilder()
            .disableInjections()
            .withRawScript(
                `
(xor
 (seq
  (seq
   (seq
    (seq
     (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
     (call %init_peer_id% ("getDataSrv" "relayPeerId") [] relayPeerId)
    )
    (call %init_peer_id% ("getDataSrv" "clientId") [] clientId)
   )
   (call -relay- ("op" "identity") [])
  )
  (xor
   (seq
    (call relayPeerId ("kad" "neighborhood") [clientId false] neighbors)
    (fold neighbors n
     (par
      (xor
       (seq
        (call n ("kad" "neighborhood") [clientId false] neighbors2)
        (fold neighbors2 n2
         (seq
          (seq
           (seq
            (seq
             (seq
              (xor
               (seq
                (seq
                 (seq
                  (call n2 ("peer" "identify") [] ident)
                  (call n2 ("dist" "list_blueprints") [] blueprints)
                 )
                 (call n2 ("dist" "list_modules") [] modules)
                )
                (call n2 ("srv" "list") [] services)
               )
               (seq
                (call -relay- ("op" "identity") [])
                (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
               )
              )
              (call -relay- ("op" "identity") [])
             )
             (call n ("event" "collectPeerInfo") [n2 ident services blueprints modules])
            )
            (xor
             (fold services srv
              (par
               (seq
                (call n2 ("srv" "get_interface") [srv.$.id!] info)
                (call n2 ("event" "collectServiceInterface") [n2 srv.$.id! info.$.interface!])
               )
               (next srv)
              )
             )
             (seq
              (call -relay- ("op" "identity") [])
              (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
             )
            )
           )
           (call -relay- ("op" "identity") [])
          )
          (next n2)
         )
        )
       )
       (seq
        (call -relay- ("op" "identity") [])
        (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
       )
      )
      (seq
       (seq
        (seq
         (call -relay- ("op" "identity") [])
         (next n)
        )
        (call -relay- ("op" "identity") [])
       )
       (call %init_peer_id% ("op" "identity") [])
      )
     )
    )
   )
   (seq
    (seq
     (call -relay- ("op" "identity") [])
     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 4])
    )
    (call -relay- ("op" "identity") [])
   )
  )
 )
 (seq
  (call -relay- ("op" "identity") [])
  (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 5])
 )
)

            `,
            )
            .configHandler((h) => {
                h.on('getDataSrv', '-relay-', () => {
                    return client.relayPeerId;
                });
                h.on('getDataSrv', 'relayPeerId', () => {return relayPeerId;});
h.on('getDataSrv', 'clientId', () => {return clientId;});
                
                h.onEvent('errorHandlingSrv', 'error', (args) => {
                    // assuming error is the single argument
                    const [err] = args;
                    reject(err);
                });
            })
            .handleScriptError(reject)
            .handleTimeout(() => {
                reject('Request timed out for findAndAskNeighboursSchema');
            })
            .build();
    });
    await client.initiateFlow(request);
    return Promise.race([promise, Promise.resolve()]);
}
      


export async function collectServiceInterfaces(client, peer, services) {
    let request;
    const promise = new Promise((resolve, reject) => {
        request = new RequestFlowBuilder()
            .disableInjections()
            .withRawScript(
                `
(xor
 (seq
  (seq
   (seq
    (seq
     (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
     (call %init_peer_id% ("getDataSrv" "peer") [] peer)
    )
    (call %init_peer_id% ("getDataSrv" "services") [] services)
   )
   (call -relay- ("op" "identity") [])
  )
  (xor
   (fold services srv
    (par
     (seq
      (call peer ("srv" "get_interface") [srv.$.id!] info)
      (call peer ("event" "collectServiceInterface") [peer srv.$.id! info.$.interface!])
     )
     (next srv)
    )
   )
   (seq
    (seq
     (call -relay- ("op" "identity") [])
     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
    )
    (call -relay- ("op" "identity") [])
   )
  )
 )
 (seq
  (call -relay- ("op" "identity") [])
  (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
 )
)

            `,
            )
            .configHandler((h) => {
                h.on('getDataSrv', '-relay-', () => {
                    return client.relayPeerId;
                });
                h.on('getDataSrv', 'peer', () => {return peer;});
h.on('getDataSrv', 'services', () => {return services;});
                
                h.onEvent('errorHandlingSrv', 'error', (args) => {
                    // assuming error is the single argument
                    const [err] = args;
                    reject(err);
                });
            })
            .handleScriptError(reject)
            .handleTimeout(() => {
                reject('Request timed out for collectServiceInterfaces');
            })
            .build();
    });
    await client.initiateFlow(request);
    return Promise.race([promise, Promise.resolve()]);
}
      